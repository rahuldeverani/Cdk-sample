AWSTemplateFormatVersion: 2010-09-09

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: Must be a valid EC2 instance type

  InstanceAMI:
    Type: String
    Default: ami-0ed9277fb7eb570c9

  InstanceNumber:
    Type: String  
    Default: 4
Resources:
  Instance:
    Type: 'Custom::EC2instances'
    Properties:
      ServiceToken: !GetAtt CreateEC2function.Arn
      InstanceType: !Ref InstanceType
      InstanceAMI: !Ref InstanceAMI
      InstanceNumber: !Ref InstanceNumber


  CreateEC2function:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          from botocore.vendored import requests
          ec2_client = boto3.client('ec2')
          def lambda_handler(event, context):
              # immediate response to CF Stack DELETE Action
              responseStatus = 'SUCCESS'
              responseData = {}
              if event['RequestType'] == 'Delete':
                  sendResponse(event, context, responseStatus, responseData)
              else:
                  numInstances= int(event['ResourceProperties']['InstanceNumber'])
                  ami= event['ResourceProperties']['InstanceAMI']
                  type= event['ResourceProperties']['InstanceType']
                  response = ec2_client.run_instances( ImageId=ami, InstanceType=type,MaxCount=numInstances,MinCount=numInstances);
                  sendResponse(event, context, responseStatus, responseData)
          # send response to the pre-signed S3 URL
          def sendResponse(event, context, responseStatus, responseData):
              responseBody = {'Status': responseStatus,
                              'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,
                              'PhysicalResourceId': context.log_stream_name,
                              'StackId': event['StackId'],
                              'RequestId': event['RequestId'],
                              'LogicalResourceId': event['LogicalResourceId'],
                              'Data': responseData}
              print ('RESPONSE BODY:\n' + json.dumps(responseBody))
              try:
                  req = requests.put(event['ResponseURL'], data=json.dumps(responseBody))
                  if req.status_code != 200:
                      print(req.text)
                      raise Exception('Recieved non 200 response while sending response to CF Stack.')
                  return
              except requests.exceptions.RequestException as e:
                  print(e)
                  raise
          if __name__ == '__main__':
              lambda_handler('event', 'handler')
      Handler: !Join
        - ''
        - - index
          - .lambda_handler
      Role: !GetAtt
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: '30'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: EC2Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
              - 'ec2:RunInstances'
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeInstanceStatus'
              - 'ec2:TerminateInstances'
              Resource: ['*']
